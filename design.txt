What to compute and how:
-----------------------

By *modform*, we mean a classical cuspidal holomorphic modular form of
integer weight k>=2, level N, and character chi.

Our goal is to "compute" as many modforms as possible. 

ISSUES TO AVOID:

I've done this a few billion times before, and the main problem is always:

  - lack of knowing what I have,

  - data is in a format that is hard to work with: 
      - in a database
      - in opaque sobj's that stop working
      - unclear text files
      - data is presented only via a webpage
      - hard to extend data
      - data takes up too much space (for what it provides)
      - data not under revision control, so unclear when/where/how it was computed
  
WHAT TO COMPUTE (store using JSON):
 
   - explicit presentation for a modular symbols space attached to:
      level = positive integer
      weight = positive integer
      character = nonnegative integer i, s.t. chi = DirichletGroup(10000).galois_orbits()[i][0].
                  plus a table that records representatives
   - decomposition of new subspace: explicit list of matrices that define subspaces
   - basis for eigenvalue field
   - many Hecke eigenvalues a_p

SECONDARY DATA (computable from the above):

   - reduction of systems of Hecke eigenvalues modulo small primes
   - arithmetic data, e.g., congruence modulus
   - zeros of L(f,s)
   - special values of L(f,s)
   
In all my experience, the best format for storing data, which could
also be revision controlled, was complete objects in subdirectories.

Let K be the base field, which in all cases is QQ or a cyclotomic
field.


    level-weight-character/    # 99999-999-999, e.g., 00043-002-000
        M.sobj     # modular symbols space of dimension n
        0/         # factor of dimension d
            B      # basis_matrix -- d x n matrix over K
            Bd     # dual_basis_matrix -- d x n matrix over K
            v      # dual_eigenvector -- degree n vector over relative extension of K
            aplist # m eigenvalues:  m x d matrix over K

PLAN:

  1. Compute and store (as sobj) ambient spaces for some range of N,k,chi.

         C = DirichletGroup(43).galois_orbits()
         C[0]   # [Dirichlet character modulo 43 of conductor 1 mapping 3 |--> 1]
         M = ModularSymbols(43, 2, sign=1)
         save(M, 'M.sobj')
         # could also store timing meta info in M.txt

     This *only* stores the basic presentation without anything complicated.
     Will take little space.

  2. Go through and compute decompositions of new subspace for each.

         D = M.cuspidal_subspace().new_subspace().decomposition()
     
     and for each simple factor A = D[i] compute and save the
     following about A:

         i  = 1
         A  = D[i]   # say
         B  = A.free_module().basis_matrix()
         Bd = A.dual_free_module().basis_matrix()
         v  = A.dual_eigenvector(names='a', lift=False)    # vector over number field
         nz = A._eigen_nonzero()
         save(B,'%s/B.sobj'%i)  # really pad to 001
         save(Bd,'%s/Bd.sobj'%i)
         save(v,'%s/v.sobj'%i)          
         save(nz,'%s/nz.sobj'%i)

  3. Compute aplists.  Reconstruct A from the above data as follows:

         M  = load('M.sobj')  
         i  = 1
         B  = load('%s/B.sobj'%i)
         Bd = load('%s/Bd.sobj'%i)
         v  = load('%s/v.sobj'%i)
         nz = load('%s/nz.sobj'%i)
         B._cache['in_echelon_form'] = True
         Bd._cache['in_echelon_form'] = True
         A = sage.modular.modsym.subspace.ModularSymbolsSubspace(M, B.row_module(), Bd.row_module(), check=False)
         A._HeckeModule_free_module__dual_eigenvector = {('a',nz):(v,False)}
     
    Then compute aplist, which is a matrix with one row for each prime up to 100 (say):
      
         aplist, _ = A.compact_system_of_eigenvalues(prime_range(100), 'a')             
         save(aplist,'%s/aplist-100.sobj'%i)
    
    Later add more data with aplist-n-m meaning prime_range(n,m):

         aplist, _ = A.compact_system_of_eigenvalues(prime_range(1000), 'a')             
         save(aplist,'%s/aplist-1000.sobj'%i)
         aplist, _ = A.compact_system_of_eigenvalues(prime_range(1000,10000), 'a')  
         save(aplist,'%s/aplist-1000-10000.sobj'%i)   
   
  4. View aplist in terms of power basis:
     
         aplist = load('%s/aplist-100.sobj'%i)
         v = load('%s/v.sobj'%i)
         aplist*v
         (a, -a, -a + 2, a - 2, 2*a - 1, 2*a + 1, 2*a + 5, -2*a - 2, -4*a + 1, 3*a, -3, -6*a, -2*a - 1, 1, 6, -2*a + 11, 2*a - 2, 3*a + 4, 6*a + 1, -2*a - 6, 3*a - 12, -2*a + 2, 4*a + 9, -3*a - 6, -2*a - 1)


STATUS: I did all of the above and set it running for a few day and
have substantial useful data already.  I have decompositions for
S_2(Gamma0(N)) for N past 3100, and want to push that to level 10000.



MODULAR FORMS WEB SERVICE:

I want to design and implement right now a simple web-based API to
access the data.  This will also likely involving going through the
data and computing meta-information.

Problems with past web services I've implemented:

     * They break or can't reasonably be maintained as software gets
       upgraded because they depend on a complicated setup involving a
       database server, web server, virtual machines, etc.  (This has
       killed every dynamic modular forms web page I've ever made!)

     * They aren't stable and robust.  Don't scale.  I.e., can be
       crashed by too many requests, leak memory when walked by robot,
       etc.  E.g., moinmoin, trac.

Ideas for this web server:

     * Use flask in as simple of a way as I can that supports having
       multiple connections even if serving one of them takes a while,
       e.g., downloading a big file.
   
     * Any database use will be read only and via a sqlite file, so no
       complicated data server setup.  Also, any data in database must
       be easy to *rebuild* from raw files.  I.e., use database for
       efficiency, not as the core storage. 
 
     * All Sage computations will run in a forked and time-limited
       subprocess to avoid any potential for memory leak or other such
       side effects coming from running such code.

DESIRED FUNCTIONS:

Let S(N,k,i) be a set of representatives for the Galois orbits of
newforms in S_k(N,chi_i).  For each below there will be a timeout
parameter, since computing some of these could be time consuming
in general.

  PHASE 1:

     * NAME:   characters
       INPUT:  N (positive integer)
       OUTPUT: Sorted list of characters divided by Galois orbit, with
               their sequence number and parity.
 
     * NAME:   known_newforms
       INPUT:  sqlite query involving N,k,i
       OUTPUT: (N,k,i) -- all spaces (N,k,i) for which a decomposition
               has been computed, where N,k,i satisfy the given
               constraint.

     * NAME:   known_aplists
       INPUT:  sqlite query involving N,k,i,maxp
       OUTPUT: (N,k,i) -- all spaces (N,k,i) for which the aplist has
               been computed, where N,k,i,maxp satisfy the given
               constraint.

     * NAME:   count
       INPUT:  query involving (N,k,i)
       OUTPUT: number of newforms in the space 

     * NAME:   modsym_sobj
       INPUT:  (N,k,i,j)
       OUTPUT: corresponding simple modular symbols factor as an sobj

     * NAME:   aplist_sobj
       INPUT:  (N,k,i,j), pmax
       OUTPUT: Sage object consisting of the pair (v, aplist), where v is the
               dual eigenvector, aplist is a matrix and v*aplist is the list
               of coefficients in terms of a power basis. 

  PHASE 2:

     * NAME:   sage_newform
       INPUT:  (N,k,i,j)
       OUTPUT: corresponding Sage newform as an sobj (if possible!?)

     * NAME:   degree
       INPUT:  (N,k,i,j)
       OUTPUT: degree of S(N,k,i)[j]

     * NAME:   field_poly
       INPUT:  (N,k,i,j)
       OUTPUT: defining polynomial of number field generated
               by the Fourier coefficients of S(N,k,i)[j]

     * NAME:   field_basis
       INPUT:  (N,k,i,j)
       OUTPUT: basis of number field generated by the Fourier
               coefficients of S(N,k,i)[j]

     * NAME:   aplist
       INPUT:  (N,k,i,j), sqlite query string involving p
       OUTPUT: list of known pairs (p, a_p) that satisfy the query on
               p, where a_p is represented as a list giving
               coefficients in terms of basis output by field.

     * NAME:   aplist_powerbasis
       INPUT:  (N,k,i,j), sqlite query string involving p
       OUTPUT: list of known pairs (p, a_p) that satisfy the query on
               p, where a_p is represented in terms of power basis
 
  PHASE 3:

     * NAME:   aplist_float
       INPUT:  (N,k,i,j), prec=53, sqlite query string involving p
       OUTPUT: list of known pairs (p, a_p) that satisfy the query on
               p, where a_p is a real or complex number

     * NAME:   aplist_qadic
       INPUT:  (N,k,i,j), prime q, sqlite query string involving p
       OUTPUT: lists of known pairs (p, a_p) that satisfy the query on
               p, where a_p is in an extension of the q-adic numbers,
               for each q-adic embedding (up to conjugation)

     * NAME:   aplist_modq
       INPUT:  (N,k,i,j), prime q, sqlite query string involving p
       OUTPUT: lists of known pairs (p, a_p mod q) that satisfy the
               query on p, where a_p is in a finite field of char q,
               for reduction modulo all primes of characteristic q.

     * NAME:   anlist*
       For every function above, a version that returns all
       coefficients a_n, for all n (not just prime), computed
       on the fly using the recurrence. 

  PHASE 4:

     * NAME:   lseries
       INPUT:  (N,k,i,j), z
       OUTPUT: value of the L-series at the point z, to the best
               precision we can get.
   
     * NAME:   lseries_critical
       INPUT:  (N,k,i,j)
       OUTPUT: order of vanishing and leading coefficient of the
               L-series at all critical integer points to the best
               precision we can get.
