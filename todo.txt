At LMFDB workshop:

[ ] figure out *precisely* what is missing from data by making database table of
    4-tuples (N,k,i,missing)

          missing = subset of [
                        'M', 'decomp',
                        'aplist-00100',  'aplist-00100-01000',  'aplist-01000-10000',
                        'charpoly-00100','charpoly-00100-01000','charpoly-01000-10000',
                        'zeros', 
                        'leading', 
                        'atkin_lehner']

    Ranges:
      Trivial character S_k(G0(N)):
         * k=2   and N<=8192  = 2^13
         * k<=16 and N<=512 = 2^9
         * k<=32 and N<=32  = 2^5
      Nontrivial character S_k(N, chi):
         * k<=16, N<=128 = 2^7, all chi quadratic
         * k=2,   N<=128 = 2^7, all chi!=1, up to Galois orbit
    Want: 
       * 'aplist': a_p for p<10,000: 'aplist-00100',  'aplist-00100-01000',  'aplist-01000-10000'
       * 'charpoly' of a_p:          'charpoly-00100','charpoly-00100-01000','charpoly-01000-10000', 
       * 'zeros': of L(f,s) for each conjugate f: zeros100, leading
       * 'leading': order of vanishing and leading coeff at each
          critical integer for each conjugate form, to double precision, stored
          in a file leading.txt that has 1 line for each:
                     critical_integer  order_of_vanishing  leading_coefficient  prec
       * 'atkin_lehner': file atkin_lehner.txt with space separated
          sequence of + and - corr to prime power divisors of the level
       * 'discriminant': of the field generated by the Hecke eigenvalues, stored in
          a file discriminant.txt; first line is the integer discriminant and 
          second line gives known factorization information

[ ] compute and fill in everything that is missing (possibly fixing
    bugs along the way or changing algorithms). 
      [ ] linear algebra mod p for big p for applications to 
          exact linear algebra
      [ ] supercomputer

[ ] export data in a way that LMFDB project can use

[ ] straight programming task: replace M.sobj with data that is the
    *presentation* and nothing else.

[ ] rewrite mfdb.modform.org to GAE as demo to serve something useful
    as a test


--------------------------------------

[x] Figure out what holomorphic data is in database now and in what
    form.
--> too hard; it's all burried in the middle of Python code for returning requests.  I give.

[x] Create bitbucket project for his.   Use bitbucket because it is less limited. 

    ? Create my own nosqlite? database "schema" that has at least that
      data recomputed from scratch.

    Must output "what is known" really easily.

    Data in plain text format stored in git repo.

[ ] Compute data in reproducible way.  Simple program.  Complexity of algorithm in Sage itself.

[ ] Make web interface to nosqlite database for easy and bug free use "just in case".

[ ] Expand data that is computed using more compute resources. 

[ ] Put data back into lmfdb mongodb.









